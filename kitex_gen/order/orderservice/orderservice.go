// Code generated by Kitex v0.4.4. DO NOT EDIT.

package orderservice

import (
	order "TTMS/kitex_gen/order"
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

var orderServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*order.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddOrder":         kitex.NewMethodInfo(addOrderHandler, newAddOrderArgs, newAddOrderResult, false),
		"DeleteOrder":      kitex.NewMethodInfo(deleteOrderHandler, newDeleteOrderArgs, newDeleteOrderResult, false),
		"UpdateOrder":      kitex.NewMethodInfo(updateOrderHandler, newUpdateOrderArgs, newUpdateOrderResult, false),
		"GetAllOrder":      kitex.NewMethodInfo(getAllOrderHandler, newGetAllOrderArgs, newGetAllOrderResult, false),
		"GetOrderAnalysis": kitex.NewMethodInfo(getOrderAnalysisHandler, newGetOrderAnalysisArgs, newGetOrderAnalysisResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func addOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.AddOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).AddOrder(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddOrderArgs:
		success, err := handler.(order.OrderService).AddOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddOrderResult)
		realResult.Success = success
	}
	return nil
}
func newAddOrderArgs() interface{} {
	return &AddOrderArgs{}
}

func newAddOrderResult() interface{} {
	return &AddOrderResult{}
}

type AddOrderArgs struct {
	Req *order.AddOrderRequest
}

func (p *AddOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.AddOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddOrderArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.AddOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddOrderArgs_Req_DEFAULT *order.AddOrderRequest

func (p *AddOrderArgs) GetReq() *order.AddOrderRequest {
	if !p.IsSetReq() {
		return AddOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

type AddOrderResult struct {
	Success *order.AddOrderResponse
}

var AddOrderResult_Success_DEFAULT *order.AddOrderResponse

func (p *AddOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.AddOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddOrderResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddOrderResult) Unmarshal(in []byte) error {
	msg := new(order.AddOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddOrderResult) GetSuccess() *order.AddOrderResponse {
	if !p.IsSetSuccess() {
		return AddOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.AddOrderResponse)
}

func (p *AddOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func deleteOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.DeleteOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).DeleteOrder(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteOrderArgs:
		success, err := handler.(order.OrderService).DeleteOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteOrderResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteOrderArgs() interface{} {
	return &DeleteOrderArgs{}
}

func newDeleteOrderResult() interface{} {
	return &DeleteOrderResult{}
}

type DeleteOrderArgs struct {
	Req *order.DeleteOrderRequest
}

func (p *DeleteOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.DeleteOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in DeleteOrderArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.DeleteOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteOrderArgs_Req_DEFAULT *order.DeleteOrderRequest

func (p *DeleteOrderArgs) GetReq() *order.DeleteOrderRequest {
	if !p.IsSetReq() {
		return DeleteOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

type DeleteOrderResult struct {
	Success *order.DeleteOrderResponse
}

var DeleteOrderResult_Success_DEFAULT *order.DeleteOrderResponse

func (p *DeleteOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.DeleteOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in DeleteOrderResult")
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteOrderResult) Unmarshal(in []byte) error {
	msg := new(order.DeleteOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteOrderResult) GetSuccess() *order.DeleteOrderResponse {
	if !p.IsSetSuccess() {
		return DeleteOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.DeleteOrderResponse)
}

func (p *DeleteOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func updateOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.UpdateOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).UpdateOrder(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateOrderArgs:
		success, err := handler.(order.OrderService).UpdateOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateOrderResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateOrderArgs() interface{} {
	return &UpdateOrderArgs{}
}

func newUpdateOrderResult() interface{} {
	return &UpdateOrderResult{}
}

type UpdateOrderArgs struct {
	Req *order.UpdateOrderRequest
}

func (p *UpdateOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.UpdateOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateOrderArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.UpdateOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateOrderArgs_Req_DEFAULT *order.UpdateOrderRequest

func (p *UpdateOrderArgs) GetReq() *order.UpdateOrderRequest {
	if !p.IsSetReq() {
		return UpdateOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

type UpdateOrderResult struct {
	Success *order.UpdateOrderResponse
}

var UpdateOrderResult_Success_DEFAULT *order.UpdateOrderResponse

func (p *UpdateOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.UpdateOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateOrderResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateOrderResult) Unmarshal(in []byte) error {
	msg := new(order.UpdateOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateOrderResult) GetSuccess() *order.UpdateOrderResponse {
	if !p.IsSetSuccess() {
		return UpdateOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.UpdateOrderResponse)
}

func (p *UpdateOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getAllOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.GetAllOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).GetAllOrder(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetAllOrderArgs:
		success, err := handler.(order.OrderService).GetAllOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAllOrderResult)
		realResult.Success = success
	}
	return nil
}
func newGetAllOrderArgs() interface{} {
	return &GetAllOrderArgs{}
}

func newGetAllOrderResult() interface{} {
	return &GetAllOrderResult{}
}

type GetAllOrderArgs struct {
	Req *order.GetAllOrderRequest
}

func (p *GetAllOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.GetAllOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAllOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAllOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAllOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetAllOrderArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetAllOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.GetAllOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAllOrderArgs_Req_DEFAULT *order.GetAllOrderRequest

func (p *GetAllOrderArgs) GetReq() *order.GetAllOrderRequest {
	if !p.IsSetReq() {
		return GetAllOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAllOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetAllOrderResult struct {
	Success *order.GetAllOrderResponse
}

var GetAllOrderResult_Success_DEFAULT *order.GetAllOrderResponse

func (p *GetAllOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.GetAllOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAllOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAllOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAllOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetAllOrderResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetAllOrderResult) Unmarshal(in []byte) error {
	msg := new(order.GetAllOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAllOrderResult) GetSuccess() *order.GetAllOrderResponse {
	if !p.IsSetSuccess() {
		return GetAllOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAllOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.GetAllOrderResponse)
}

func (p *GetAllOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getOrderAnalysisHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.GetOrderAnalysisRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).GetOrderAnalysis(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetOrderAnalysisArgs:
		success, err := handler.(order.OrderService).GetOrderAnalysis(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetOrderAnalysisResult)
		realResult.Success = success
	}
	return nil
}
func newGetOrderAnalysisArgs() interface{} {
	return &GetOrderAnalysisArgs{}
}

func newGetOrderAnalysisResult() interface{} {
	return &GetOrderAnalysisResult{}
}

type GetOrderAnalysisArgs struct {
	Req *order.GetOrderAnalysisRequest
}

func (p *GetOrderAnalysisArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.GetOrderAnalysisRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetOrderAnalysisArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetOrderAnalysisArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetOrderAnalysisArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetOrderAnalysisArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetOrderAnalysisArgs) Unmarshal(in []byte) error {
	msg := new(order.GetOrderAnalysisRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetOrderAnalysisArgs_Req_DEFAULT *order.GetOrderAnalysisRequest

func (p *GetOrderAnalysisArgs) GetReq() *order.GetOrderAnalysisRequest {
	if !p.IsSetReq() {
		return GetOrderAnalysisArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetOrderAnalysisArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetOrderAnalysisResult struct {
	Success *order.GetOrderAnalysisResponse
}

var GetOrderAnalysisResult_Success_DEFAULT *order.GetOrderAnalysisResponse

func (p *GetOrderAnalysisResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.GetOrderAnalysisResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetOrderAnalysisResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetOrderAnalysisResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetOrderAnalysisResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetOrderAnalysisResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetOrderAnalysisResult) Unmarshal(in []byte) error {
	msg := new(order.GetOrderAnalysisResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetOrderAnalysisResult) GetSuccess() *order.GetOrderAnalysisResponse {
	if !p.IsSetSuccess() {
		return GetOrderAnalysisResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetOrderAnalysisResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.GetOrderAnalysisResponse)
}

func (p *GetOrderAnalysisResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddOrder(ctx context.Context, Req *order.AddOrderRequest) (r *order.AddOrderResponse, err error) {
	var _args AddOrderArgs
	_args.Req = Req
	var _result AddOrderResult
	if err = p.c.Call(ctx, "AddOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteOrder(ctx context.Context, Req *order.DeleteOrderRequest) (r *order.DeleteOrderResponse, err error) {
	var _args DeleteOrderArgs
	_args.Req = Req
	var _result DeleteOrderResult
	if err = p.c.Call(ctx, "DeleteOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOrder(ctx context.Context, Req *order.UpdateOrderRequest) (r *order.UpdateOrderResponse, err error) {
	var _args UpdateOrderArgs
	_args.Req = Req
	var _result UpdateOrderResult
	if err = p.c.Call(ctx, "UpdateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAllOrder(ctx context.Context, Req *order.GetAllOrderRequest) (r *order.GetAllOrderResponse, err error) {
	var _args GetAllOrderArgs
	_args.Req = Req
	var _result GetAllOrderResult
	if err = p.c.Call(ctx, "GetAllOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrderAnalysis(ctx context.Context, Req *order.GetOrderAnalysisRequest) (r *order.GetOrderAnalysisResponse, err error) {
	var _args GetOrderAnalysisArgs
	_args.Req = Req
	var _result GetOrderAnalysisResult
	if err = p.c.Call(ctx, "GetOrderAnalysis", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
