// Code generated by Kitex v0.4.4. DO NOT EDIT.

package orderservice

import (
	order "TTMS/kitex_gen/order"
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

var orderServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*order.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetAllOrder":      kitex.NewMethodInfo(getAllOrderHandler, newGetAllOrderArgs, newGetAllOrderResult, false),
		"GetOrderAnalysis": kitex.NewMethodInfo(getOrderAnalysisHandler, newGetOrderAnalysisArgs, newGetOrderAnalysisResult, false),
		"CommitOrder":      kitex.NewMethodInfo(commitOrderHandler, newCommitOrderArgs, newCommitOrderResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getAllOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.GetAllOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).GetAllOrder(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetAllOrderArgs:
		success, err := handler.(order.OrderService).GetAllOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAllOrderResult)
		realResult.Success = success
	}
	return nil
}
func newGetAllOrderArgs() interface{} {
	return &GetAllOrderArgs{}
}

func newGetAllOrderResult() interface{} {
	return &GetAllOrderResult{}
}

type GetAllOrderArgs struct {
	Req *order.GetAllOrderRequest
}

func (p *GetAllOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.GetAllOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAllOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAllOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAllOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetAllOrderArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetAllOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.GetAllOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAllOrderArgs_Req_DEFAULT *order.GetAllOrderRequest

func (p *GetAllOrderArgs) GetReq() *order.GetAllOrderRequest {
	if !p.IsSetReq() {
		return GetAllOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAllOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetAllOrderResult struct {
	Success *order.GetAllOrderResponse
}

var GetAllOrderResult_Success_DEFAULT *order.GetAllOrderResponse

func (p *GetAllOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.GetAllOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAllOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAllOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAllOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetAllOrderResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetAllOrderResult) Unmarshal(in []byte) error {
	msg := new(order.GetAllOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAllOrderResult) GetSuccess() *order.GetAllOrderResponse {
	if !p.IsSetSuccess() {
		return GetAllOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAllOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.GetAllOrderResponse)
}

func (p *GetAllOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getOrderAnalysisHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.GetOrderAnalysisRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).GetOrderAnalysis(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetOrderAnalysisArgs:
		success, err := handler.(order.OrderService).GetOrderAnalysis(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetOrderAnalysisResult)
		realResult.Success = success
	}
	return nil
}
func newGetOrderAnalysisArgs() interface{} {
	return &GetOrderAnalysisArgs{}
}

func newGetOrderAnalysisResult() interface{} {
	return &GetOrderAnalysisResult{}
}

type GetOrderAnalysisArgs struct {
	Req *order.GetOrderAnalysisRequest
}

func (p *GetOrderAnalysisArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.GetOrderAnalysisRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetOrderAnalysisArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetOrderAnalysisArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetOrderAnalysisArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetOrderAnalysisArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetOrderAnalysisArgs) Unmarshal(in []byte) error {
	msg := new(order.GetOrderAnalysisRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetOrderAnalysisArgs_Req_DEFAULT *order.GetOrderAnalysisRequest

func (p *GetOrderAnalysisArgs) GetReq() *order.GetOrderAnalysisRequest {
	if !p.IsSetReq() {
		return GetOrderAnalysisArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetOrderAnalysisArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetOrderAnalysisResult struct {
	Success *order.GetOrderAnalysisResponse
}

var GetOrderAnalysisResult_Success_DEFAULT *order.GetOrderAnalysisResponse

func (p *GetOrderAnalysisResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.GetOrderAnalysisResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetOrderAnalysisResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetOrderAnalysisResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetOrderAnalysisResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetOrderAnalysisResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetOrderAnalysisResult) Unmarshal(in []byte) error {
	msg := new(order.GetOrderAnalysisResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetOrderAnalysisResult) GetSuccess() *order.GetOrderAnalysisResponse {
	if !p.IsSetSuccess() {
		return GetOrderAnalysisResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetOrderAnalysisResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.GetOrderAnalysisResponse)
}

func (p *GetOrderAnalysisResult) IsSetSuccess() bool {
	return p.Success != nil
}

func commitOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.CommitOrderRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).CommitOrder(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CommitOrderArgs:
		success, err := handler.(order.OrderService).CommitOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CommitOrderResult)
		realResult.Success = success
	}
	return nil
}
func newCommitOrderArgs() interface{} {
	return &CommitOrderArgs{}
}

func newCommitOrderResult() interface{} {
	return &CommitOrderResult{}
}

type CommitOrderArgs struct {
	Req *order.CommitOrderRequest
}

func (p *CommitOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.CommitOrderRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CommitOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CommitOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CommitOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CommitOrderArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CommitOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.CommitOrderRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CommitOrderArgs_Req_DEFAULT *order.CommitOrderRequest

func (p *CommitOrderArgs) GetReq() *order.CommitOrderRequest {
	if !p.IsSetReq() {
		return CommitOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CommitOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

type CommitOrderResult struct {
	Success *order.CommitOrderResponse
}

var CommitOrderResult_Success_DEFAULT *order.CommitOrderResponse

func (p *CommitOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.CommitOrderResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CommitOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CommitOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CommitOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CommitOrderResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CommitOrderResult) Unmarshal(in []byte) error {
	msg := new(order.CommitOrderResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CommitOrderResult) GetSuccess() *order.CommitOrderResponse {
	if !p.IsSetSuccess() {
		return CommitOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CommitOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.CommitOrderResponse)
}

func (p *CommitOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetAllOrder(ctx context.Context, Req *order.GetAllOrderRequest) (r *order.GetAllOrderResponse, err error) {
	var _args GetAllOrderArgs
	_args.Req = Req
	var _result GetAllOrderResult
	if err = p.c.Call(ctx, "GetAllOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrderAnalysis(ctx context.Context, Req *order.GetOrderAnalysisRequest) (r *order.GetOrderAnalysisResponse, err error) {
	var _args GetOrderAnalysisArgs
	_args.Req = Req
	var _result GetOrderAnalysisResult
	if err = p.c.Call(ctx, "GetOrderAnalysis", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommitOrder(ctx context.Context, Req *order.CommitOrderRequest) (r *order.CommitOrderResponse, err error) {
	var _args CommitOrderArgs
	_args.Req = Req
	var _result CommitOrderResult
	if err = p.c.Call(ctx, "CommitOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
